*neopilot.txt*  Neopilot

GETTING STARTED                                 *neopilot*

Run the `:Neopilot Auth` command to login to Neopilot. This is required to
enable the plugin.

Once logged in, suggested completions will be displayed inline as virtual
text. You can insert a completion by pressing <Tab>.

COMMANDS                                        *:Neopilot*

                                                *:Neopilot_Auth*
:Neopilot Auth           Authenticate to Neopilot.

                                                *:Neopilot_Chat*
:Neopilot Chat           Open Neopilot Chat in a browser window

                                                *:Neopilot_Disable*
:Neopilot Disable        Disable Neopilot completions

                                                *:Neopilot_Enable*
:Neopilot Enable         Re-enable Neopilot completions after running :Neopilot Disable

                                                *:Neopilot_DisableBuffer*
:Neopilot DisableBuffer  Disable Neopilot completions in the current buffer only.

                                                *:Neopilot_EnableBuffer*
:Neopilot EnableBuffer   Re-enable Neopilot completions in the current
                        buffer after running :Neopilot DisableBuffer

                                                *:Neopilot_Toggle*
:Neopilot Toggle         Enable Neopilot completions if they are disabled.
                        Disable Neopilot completions if they are enabled. Does
                        NOT enable completions for current buffer, if they are
                        disabled with :Neopilot DisableBuffer. However, still
                        affects other buffers.

OPTIONS                                         *neopilot-options*

                                                *g:neopilot_filetypes*
g:neopilot_filetypes     A dictionary mapping whether neopilot should be
                        enabled or disabled in certain filetypes. This can
                        be used to opt out of completions for certain filetypes.
>
                        let g:neopilot_filetypes = {
                              \ 'bash': v:false,
                              \ 'typescript': v:true,
                              \ }
<

                                                *g:neopilot_enabled*
g:neopilot_enabled       A global boolean flag that controls whether neopilot
                        completions are enabled or disabled by default.
>
                        let g:neopilot_enabled = v:true
<

                                                *g:neopilot_manual*
g:neopilot_manual        If true, neopilot completions will never automatically
                        trigger.
>
                        let g:neopilot_manual = v:true
<

                                                *g:neopilot_no_map_tab*
g:neopilot_no_map_tab    A global boolean flag that controls whether neopilot
                        uses <TAB> for the mapping neopilot#Accept
>
                        let g:neopilot_no_map_tab = v:true
<

                                                *g:neopilot_idle_delay*
g:neopilot_idle_delay    Delay in milliseconds before autocompletions are
                        shown (limited by language server to a minimum of 75).
>
                        let g:neopilot_idle_delay = 500
<
                                                *g:neopilot_render*
g:neopilot_render        A global boolean flag that controls whether neopilot
                        renders are enabled or disabled.
>
                        let g:neopilot_render = v:false
<

                                                *g:neopilot_tab_fallback*
g:neopilot_tab_fallback  The fallback key when there is no suggestion display
                        in `neopilot#Accept()`.
>
                        let g:neopilot_tab_fallback = "\t"
<
                                                *g:neopilot_bin*
g:neopilot_bin           Manually set the path to the `neopilot` language server
                        binary on your system.
                        If unset, `neopilot.vim` will fetch and download the
                        binary from the internet.
>
                        let g:neopilot_bin = "~/.local/bin/neopilot_language_server"
<
                                                *g:neopilot_os*
g:neopilot_os            Manually set the host OS, accepted values are
                        "Linux", "Darwin", "Windows". if unset, the value will
                        be obtained using `uname`.
>
                        let g:neopilot_os = "Linux"
<
                                                *g:neopilot_arch*
g:neopilot_arch          Manually set the host architecture, accepted values
                        are "x86_64", "aarch64", "arm". If unset, the value
                        will be obtained using `uname -m`.
>
                        let g:neopilot_arch = "x86_64"
<
                                                *g:neopilot_port_config*
g:neopilot_port_config
                        Set the ports the chat client and web server use.
			Pass in web_server and chat_client fields to the mapping to set.
                        Please note that if this option is set, only one
			window will work with neopilot.
			It is recommended to set both the web_server and chat_client options
			if using this. 
			If you are setting this because you are using vim remotely and want chat to work
			you will need to forward the two ports you set here, along with port 42100.
			That window can have as many buffers within it, but any other
			opened windows will not be able to use Neopilot's features.
>
                        let g:neopilot_port_config = {
				'web_server': <Your web server port>,
				'chat_client': <Your chat client port>
				}
<
                                                *g:neopilot_virtual_text_priority*
g:neopilot_virtual_text_priority
                        The priority used for Neopilot's virtual text completions
                        in Neovim. This can control how completions appear when
                        multiple virtual text items are on the same line, such
                        as when using LSP inlay hints.

                        The priority can be set on a per-buffer basis by setting
                        the b:neopilot_virtual_text_priority variable. If
                        neither of these are set, the default priority is 65535,
                        which will usually place it above any other virtual text.
>
                        let g:neopilot_virtual_text_priority = 1000
<

                                                *b:neopilot_virtual_text_priority*
b:neopilot_virtual_text_priority
                        The priority given to Neopilot's virtual text completions
                        for the current buffer in Neovim. If not set,
                        g:neopilot_virtual_text_priority is used.
>
                        let b:neopilot_virtual_text_priority = 1000
<

MAPS                                            *neopilot-maps*

                                                *neopilot-i_<Tab>*
Neopilot.vim defaults to using the <Tab> key to insert the current
suggestion. If there is no suggestion display, the <Tab> key will fallback
to any existing <Tab> mapping you have. This is bound to `neopilot#Accept()`

Other Maps ~

                                                *neopilot-i_CTRL-]*
<C-]>                   Dismiss the current suggestion.
<Plug>(neopilot-dismiss)
<Cmd>call neopilot#Clear()<CR>

                                                *neopilot-i_ALT-]*
<M-]>                   Cycle to the next suggestion.
<Plug>(neopilot-next)
<Cmd>call neopilot#CycleCompletions(1)<CR>

                                                *neopilot-i_ALT-[*
<M-[>                   Cycle to the previous suggestion.
<Plug>(neopilot-previous)
<Cmd>call neopilot#CycleCompletions(-1)<CR>

SYNTAX HIGHLIGHTING                             *neopilot-highlighting*

Inline suggestions are highlighted using the NeopilotSuggestion group,
which defaults to a gray color. You can configure this highlight group for
your colorscheme in after/colors/<colorschemename>.vim in your
'runtimepath' (e.g., ~/.config/nvim/after/colors/solarized.vim).  Example
declaration:
>
        highlight NeopilotSuggestion guifg=#555555 ctermfg=8
<
 vim:tw=78:et:ft=help:norl:
